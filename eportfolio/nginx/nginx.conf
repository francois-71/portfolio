worker_processes auto;  # Automatically determine the number of CPU cores

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    # Define common security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    server {
        listen 80;
        listen [::]:80;
        server_name dionfrancois.com;

        # Let's Encrypt ACME challenge location
        location /.well-known/acme-challenge/ {
            root /var/www/certbot/;
        }

        # Redirect HTTP to HTTPS and add trailing slash if missing
        #location / {
            #return 301 https://$host$request_uri/;
        #}

        
    }

    server {
        listen 443 ssl;
        server_name dionfrancois.com;

        # SSL certificate settings
        ssl_certificate /etc/letsencrypt/live/dionfrancois.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/dionfrancois.com-0001/privkey.pem;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256';

        # Enable OCSP stapling for improved security and performance
        ssl_stapling on;
        ssl_stapling_verify on;

        # Enable HSTS (HTTP Strict Transport Security) with preloading
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
        root /usr/share/nginx/html;
    
        location / {
            try_files $uri /index.html;  
        }
        # Since the first location will look for anything after / and before the second /, we can use this to create a catch-all location for all static files. 
        # This will allow us to use the same location block for all static files, regardless of the file extension.
        location ~ .(static)/(js|css|media)/(.+)$  {

            try_files $uri $uri/ /$1/$2/$3;

        }

        # Proxy requests to the backend API because we don't want to expose it to the public
        location /api {
            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
